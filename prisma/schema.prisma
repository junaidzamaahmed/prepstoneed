// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }
// User model
model User {
  id         String  @id @default(uuid())
  externalId String  @unique
  email      String  @unique
  role       Role    @default(STUDENT)
  fullName   String?
  phone      String?

  // Relationships
  quizAttempts       QuizAttempt[]
  // createdQuiz  Quiz[]
  purchases          Purchase[]
  accessRequests     AccessRequest[]
  browserFingerprint BrowserFingerprint[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id               String  @id @default(uuid())
  name             String  @unique
  isCourseCategory Boolean @default(false)

  quizzes Quiz[]
  courses Course[]
}

// Quiz model
model Quiz {
  id          String  @id @default(uuid())
  categoryId  String?
  userId      String
  title       String
  description String? @db.Text
  duration    Int
  price       Int?    @default(1)
  isPublished Boolean @default(false)

  // Relationships
  category Category? @relation(fields: [categoryId], references: [id])
  courseId String?
  // user     User      @relation(fields: [userId], references: [id])

  course   Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attempts QuizAttempt[]
  sections Section[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id          String     @id @default(uuid())
  quizId      String
  name        String
  difficulty  Difficulty @default(EASY)
  isPublished Boolean    @default(false)
  position    Int

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  questions Question[]
}

// Question model
model Question {
  id          String  @id @default(uuid())
  sectionId   String
  question    String  @db.Text
  explanation String? @db.Text
  position    Int
  imageUrl    String? @db.Text
  isPublished Boolean @default(false)
  qtype       Qtype   @default(MCQ)
  categoryId  String?

  // Relationships
  section      Section               @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  answers      Answer[]
  responses    UserResponse[]
  category     QuestionCategory?     @relation(fields: [categoryId], references: [id])
  tagRelations QuestionTagRelation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionCategory {
  id        String     @id @default(uuid())
  name      String     @unique
  questions Question[]
}

model QuestionTagRelation {
  questionId String
  tagId      String

  question Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag      QuestionTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
}

model QuestionTag {
  id                String                @id @default(uuid())
  name              String                @unique
  questionRelations QuestionTagRelation[]
}

// Answer model
model Answer {
  id         String  @id @default(uuid())
  questionID String // Foreign key referencing Question.id
  text       String  @db.Text
  isCorrect  Boolean @default(false)
  position   Int

  // Relationships
  question  Question       @relation(fields: [questionID], references: [id], onDelete: Cascade)
  responses UserResponse[]
}

// QuizAttempt model
model QuizAttempt {
  id         String    @id @default(uuid())
  userID     String // Foreign key referencing User.id
  quizID     String // Foreign key referencing Quiz.id
  score      Int       @default(0)
  percentage Float     @default(0)
  startTime  DateTime  @default(now())
  endTime    DateTime?
  completed  Boolean?  @default(false)
  sections   String[]

  // Relationships
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizID], references: [id], onDelete: Cascade)

  responses UserResponse[]
}

// UserResponse model
model UserResponse {
  id               String  @id @default(uuid())
  attemptID        String // Foreign key referencing QuizAttempt.id
  questionID       String // Foreign key referencing Question.id
  selectedAnswerID String? // Foreign key referencing Answer.id
  isCorrect        Boolean @default(false)
  inputText        String? @db.Text

  // Relationships
  attempt        QuizAttempt @relation(fields: [attemptID], references: [id])
  question       Question    @relation(fields: [questionID], references: [id])
  selectedAnswer Answer?     @relation(fields: [selectedAnswerID], references: [id])

  @@unique([attemptID, questionID])
}

// Role enum
enum Role {
  STUDENT
  TEACHER
  SPECIAL
}

// Difficulty enum
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Qtype {
  MCQ
  INPUT
}

model Course {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text

  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  price       Int?
  imageUrl    String?
  classLink   String?

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  instructors    InstructorInstructs[]
  recordings     Recordings[]
  purchases      Purchase[]
  CoursePoints   CoursePoints[]
  CourseFeatures CourseFeatures[]
  CourseRoutine  CourseRoutine[]
  FAQ            FAQ[]
  tests          Quiz[]
  accessRequests AccessRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id       String  @id @default(uuid())
  userId   String
  courseId String
  trxId    String?
  phone    String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Recordings {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  isFree      Boolean  @default(false)
  muxData     MuxData?
  isPublished Boolean  @default(false)
  position    Int
  videoUrl    String?  @db.Text
  videoSource Int?     @default(0)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  recordingId String     @unique
  recording   Recordings @relation(fields: [recordingId], references: [id], onDelete: Cascade)
}

model Instructor {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  bio      String? @db.Text
  imageUrl String?

  courses InstructorInstructs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstructorInstructs {
  id           String @id @default(uuid())
  instructorId String
  courseId     String

  instructor Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([instructorId, courseId])
}

model CoursePoints {
  id          String @id @default(uuid())
  courseId    String
  description String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseFeatures {
  id       String @id @default(uuid())
  courseId String
  feature  String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model CourseRoutine {
  id       String @id @default(uuid())
  courseId String
  day      String
  time     String
  title    String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model FAQ {
  id       String @id @default(uuid())
  question String
  answer   String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccessRequest {
  id       String  @id @default(uuid())
  userId   String
  courseId String
  trxId    String?
  phone    String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model BrowserFingerprint {
  fingerprint String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([fingerprint, userId])
  @@unique([fingerprint, userId])
}
